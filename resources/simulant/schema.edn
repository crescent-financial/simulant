{:clock
 [[{:db/ident :clock/type
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one}
   {:db/ident :clock.type/fixed}
   {:db/ident :clock/realStart
    :db/valueType :db.type/long
    :db/doc "Real time at which sim clock started"
    :db/cardinality :db.cardinality/one}
   {:db/ident :clock/multiplier
    :db/valueType :db.type/double
    :db/doc "Multiply real time by a fixed multiplier"
    :db/cardinality :db.cardinality/one}]]

 :model
 [[{:db/ident :model/type
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one}
   {:db/ident :model/tests
    :db/valueType :db.type/ref
    :db/doc "Tests generated from this model"
    :db/cardinality :db.cardinality/many}]]

 :test
 [[{:db/ident :test/type
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one}
   {:db/ident :test/duration
    :db/valueType :db.type/long
    :db/doc "Duration covered by test (in msec)"
    :db/cardinality :db.cardinality/one}
   {:db/ident :test/agents
    :db/valueType :db.type/ref
    :db/doc "Agents in this test"
    :db/cardinality :db.cardinality/many}
   {:db/ident :test/sims
    :db/valueType :db.type/ref
    :db/doc "Sims run for this test"
    :db/cardinality :db.cardinality/many}]]

 :agent
 [[{:db/ident :agent/type
    :db/valueType :db.type/ref
    :db/doc "Type of agent"
    :db/cardinality :db.cardinality/one}
   {:db/ident :agent/errorDescription
    :db/valueType :db.type/string
    :db/cardinality :db.cardinality/one
    :db/doc "Human readable description of agent error, if any"}
   {:db/ident :agent/actions
    :db/valueType :db.type/ref
    :db/doc "Actions performed by this agent"
    :db/cardinality :db.cardinality/many}]]

 :actionLog
 [[{:db/ident :actionLog/action
    :db/valueType :db.type/ref
    :db/doc "Action this log entry is associated with"
    :db/cardinality :db.cardinality/one}
   {:db/ident :actionLog/sim
    :db/valueType :db.type/ref
    :db/doc "Sim this log entry is associated with"
    :db/cardinality :db.cardinality/one}
   {:db/ident :actionLog/nsec
    :db/valueType :db.type/long
    :db/doc "How long this action took, in nsec"
    :db/cardinality :db.cardinality/one}
   {:db/ident :actionLog.service/batch-size
    :db/valueType :db.type/long
    :db/doc "The batch size to use when transacting action log entries"
    :db/cardinality :db.cardinality/one}
   {:db/ident :simulant.sim/actionLog}
   {:db/ident :simulant.sim/processState}
   {:db/ident :actionLog/skipped
    :db/valueType :db.type/boolean
    :db/doc "True if this entity records the fact that an action was skipped due to the agent being interrupted."
    :db/cardinality :db.cardinality/one}
   {:db/ident :actionLog/failure-type
    :db/valueType :db.type/string
    :db/doc "Classname of the exception that aborted an agent."
    :db/cardinality :db.cardinality/one}
   {:db/ident :actionLog/failure-trace
    :db/valueType :db.type/string
    :db/doc "Stacktrace of the exception that aborted an agent."
    :db/cardinality :db.cardinality/one}
   {:db/ident :actionLog/failure-message
    :db/valueType :db.type/string
    :db/doc "Message string of the exception that aborted an agent."
    :db/cardinality :db.cardinality/one}
   {:db/ident :step/type
    :db/valueType :db.type/ref
    :db/doc "Identifier for the kind of step within an action."
    :db/cardinality :db.cardinality/one}
   {:db/ident :actionLog/id
    :db/valueType :db.type/uuid
    :db/unique :db.unique/identity
    :db/doc "A unique identifier for the action log item."
    :db/cardinality :db.cardinality/one}
   {:db/ident :actionLog/sequence-number
    :db/valueType :db.type/long
    :db/doc "Monotonically increasing number that provides a partial sort order for action log entries."
    :db/cardinality :db.cardinality/one}
   {:db/ident :actionLog/steps
    :db/valueType :db.type/ref
    :db/doc "Which step of the action was this entry for?"
    :db/cardinality :db.cardinality/one}
   {:db/ident :actionLog/http-request
    :db/valueType :db.type/ref
    :db/doc "An HTTP request generated by an action."
    :db/cardinality :db.cardinality/one
    :db/isComponent true}
   {:db/ident :actionLog/http-response
    :db/valueType :db.type/ref
    :db/doc "An HTTP response received in the action."
    :db/cardinality :db.cardinality/one
    :db/isComponent true}
   {:db/ident :http/method
    :db/valueType :db.type/keyword
    :db/doc "The method of the HTTP request."
    :db/cardinality :db.cardinality/one}
   {:db/ident :http/headers
    :db/valueType :db.type/ref
    :db/doc "The HTTP headers."
    :db/cardinality :db.cardinality/many
    :db/isComponent true}
   {:db/ident :http/url
    :db/valueType :db.type/string
    :db/doc "The URL of the HTTP request."
    :db/cardinality :db.cardinality/one}
   {:db/ident :http/body
    :db/valueType :db.type/string
    :db/doc "The HTTP body."
    :db/cardinality :db.cardinality/one}
   {:db/ident :http/status
    :db/valueType :db.type/long
    :db/doc "The HTTP response status code."
    :db/cardinality :db.cardinality/one}
   {:db/ident :http.header/name
    :db/valueType :db.type/string
    :db/doc "The name of the HTTP header."
    :db/cardinality :db.cardinality/one}
   {:db/ident :http.header/value
    :db/valueType :db.type/string
    :db/doc "The value of the HTTP header."
    :db/cardinality :db.cardinality/one}]]

 :action
 [[{:db/ident :action/atTime
    :db/valueType :db.type/long
    :db/doc "Time this action should happen, in msec relative to start of the sim."
    :db/cardinality :db.cardinality/one}
   {:db/ident :action/type
    :db/valueType :db.type/ref
    :db/doc "Type of the action."
    :db/cardinality :db.cardinality/one}]]

 :process
 [[{:db/ident :process.type/basic}
   {:db/ident :process.state/running}
   {:db/ident :process.state/completed}
   {:db/ident :process.state/failed}
   {:db/ident :process/errorDescription
    :db/valueType :db.type/string
    :db/cardinality :db.cardinality/one
    :db/doc "Human readable description of process error, if any"}
   {:db/ident :process/type
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one}
   {:db/ident :process/state
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one}
   {:db/ident :process/ordinal
    :db/valueType :db.type/long
    :db/doc "Ordinal number of process within sim, determines which actions this process is responsible for."
    :db/cardinality :db.cardinality/one}
   {:db/ident :process/uuid
    :db/valueType :db.type/uuid
    :db/doc "Unique id for process"
    :db/unique :db.unique/value
    :db/cardinality :db.cardinality/one}]]

 :services
 [[{:db/ident :service/type
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one}
   {:db/ident :service/key
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one}
   {:db/ident :service/constructor
    :db/valueType :db.type/string
    :db/cardinality :db.cardinality/one
    :db/doc "The fully qualified name of a Clojure function that
builds the service. The function will be called with a DB connection and
this service entity."}
   {:db/doc "Service that accumulates events during a sim run,
and then transacts them into the sim database at the
end of the run."
    :db/ident :service.type/actionLog}
   {:db/doc "Service that allows a process to track its state in a database"
    :db/ident :service.type/processState}]]

 :sim
 [[{:db/ident :sim.type/basic}
   {:db/ident :sim/services
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/many
    :db/doc "Services used by this sim"}
   {:db/ident :sim/type
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one}
   {:db/ident :sim/systemDBName
    :db/valueType :db.type/string
    :db/doc "Name of the system under test."
    :db/cardinality :db.cardinality/one}
   {:db/ident :sim/processCount
    :db/valueType :db.type/long
    :db/doc "Total number of processes desired for this sim."
    :db/cardinality :db.cardinality/one}
   {:db/ident :sim/clock
    :db/valueType :db.type/ref
    :db/doc "The clock used by this sim"
    :db/cardinality :db.cardinality/one}
   {:db/ident :sim/processes
    :db/valueType :db.type/ref
    :db/doc "Processes that have joined this sim."
    :db/cardinality :db.cardinality/many}]]

 :codebase
 [[{:db/ident :source/codebase
    :db/valueType :db.type/ref
    :db/doc "Reference to information about the source tree"
    :db/cardinality :db.cardinality/one}
   {:db/ident :repo.type/git}
   {:db/ident :repo/type
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one
    :db/doc "Type of repository"}
   {:db/ident :git/uri
    :db/valueType :db.type/string
    :db/doc "Git repository URI"
    :db/cardinality :db.cardinality/one}
   {:db/ident :git/sha
    :db/valueType :db.type/string
    :db/doc "SHA ref for current git HEAD"
    :db/cardinality :db.cardinality/one}]]}
